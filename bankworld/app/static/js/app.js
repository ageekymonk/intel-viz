// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var BWDashboard, BWMap, BWMapVirus, BWReportMap, DifferenceChart, HeatMap, MultiLineChart, MultiTimeSeriesPolicyChart, ServerConnectionsChart, WsConnectionsChart, b,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BWMap = (function() {
    function BWMap(width, height, parent, evDispatch) {
      if (width == null) {
        width = 400;
      }
      if (height == null) {
        height = 300;
      }
      if (parent == null) {
        parent = "body";
      }
      this.width = width;
      this.height = height;
      this.parent = parent;
      this.evDispatch = evDispatch;
      this.projection = d3.geo.equirectangular();
      this.svg = d3.select(parent).append("svg").attr({
        width: this.width,
        height: this.height
      });
      this.coord = null;
      this.datareport = null;
    }

    BWMap.prototype.load = function() {
      return d3.csv('/static/csv/branch_lat_long.csv').get((function(_this) {
        return function(error, world) {
          var dateFormat;
          world.forEach(function(d) {
            var _ref, _ref1;
            _ref = _this.projection([d.minlong, d.maxlat]), d.x1 = _ref[0], d.y1 = _ref[1];
            _ref1 = _this.projection([d.maxlong, d.minlat]), d.x2 = _ref1[0], d.y2 = _ref1[1];
            d.width = (d.x2 - d.x1) === 0 ? 5 : d.x2 - d.x1;
            return d.height = (d.y2 - d.y1) === 0 ? 5 : d.y2 - d.y1;
          });
          dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
          _this.coord = world;
          return d3.csv('/static/csv/ws_report_status.csv').get(function(error, datareport) {
            _this.datareport = datareport;
            datareport.forEach(function(d) {
              dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
              return d.timestamp = dateFormat.parse(d.healthtime);
            });
            return _this.evDispatch.attime(dateFormat.parse("2012-02-02 14:00:00"));
          });
        };
      })(this));
    };

    BWMap.prototype.draw = function(time) {
      var report;
      this.svg.remove();
      this.svg = d3.select(this.parent).append("svg").attr({
        width: this.width,
        height: this.height
      });
      this.svg.append("svg:image").attr("xlink:href", "/static/images/BankWorld-binary.png").attr("x", "0").attr("y", "0").attr("width", this.width).attr("height", this.height);
      this.svg.insert("path", ".graticule").attr("class", "boundary").attr("d", "").attr('fill', "url(#img1)");
      this.svg.selectAll(".area").data(this.coord).enter().append("circle", ".area").attr({
        cx: function(d) {
          return d.x1;
        },
        cy: function(d) {
          return d.y1;
        },
        r: function(d) {
          return 0;
        },
        id: function(d) {
          return "bu_" + d.businessunit;
        }
      }).style("stroke", "black").attr({
        "fill": "red",
        "fill-opacity": .8
      }).on("click", (function(_this) {
        return function(d) {
          return _this.evDispatch.selectRegion(d.businessunit);
        };
      })(this));
      this.svg.selectAll('circle').on("mouseover.tooltip", (function(_this) {
        return function(d) {
          _this.svg.select('#data_id').remove();
          return _this.svg.append('text').text(d.businessunit).attr('x', d.x1).attr('y', d.y1).attr('id', 'data_id');
        };
      })(this));
      this.svg.selectAll('circle').on("mouseout.tooltip", (function(_this) {
        return function(d) {
          return _this.svg.select('#data_id').transition().duration(20).style('opacity', 0).attr('transform', 'translate(10,-10)').remove();
        };
      })(this));
      report = this.datareport.filter((function(_this) {
        return function(d) {
          return +d.timestamp === +time;
        };
      })(this));
      report.forEach((function(_this) {
        return function(d) {
          if (d.businessunit === 'datacenter-5') {
            console.log(d);
          }
          if (((+d.expected - +d.reported) / +d.expected) * 100 >= 10) {
            return _this.svg.select("#bu_" + d.businessunit).attr({
              r: ((+d.expected - +d.reported) / +d.expected) * 10
            });
          }
        };
      })(this));
      return d3.select(self.frameElement).style("height", this.height + "px");
    };

    return BWMap;

  })();

  BWMapVirus = (function() {
    function BWMapVirus(width, height, parent, evDispatch) {
      if (width == null) {
        width = 400;
      }
      if (height == null) {
        height = 300;
      }
      if (parent == null) {
        parent = "body";
      }
      this.width = width;
      this.height = height;
      this.parent = parent;
      this.evDispatch = evDispatch;
      this.projection = d3.geo.equirectangular();
      this.svg = d3.select(parent).append("svg").attr({
        width: this.width,
        height: this.height
      });
      this.coord = null;
      this.datareport = null;
    }

    BWMapVirus.prototype.load = function() {
      return d3.csv('/static/csv/branch_lat_long.csv').get((function(_this) {
        return function(error, world) {
          var dateFormat;
          world.forEach(function(d) {
            var _ref, _ref1;
            _ref = _this.projection([d.minlong, d.maxlat]), d.x1 = _ref[0], d.y1 = _ref[1];
            _ref1 = _this.projection([d.maxlong, d.minlat]), d.x2 = _ref1[0], d.y2 = _ref1[1];
            d.width = (d.x2 - d.x1) === 0 ? 5 : d.x2 - d.x1;
            return d.height = (d.y2 - d.y1) === 0 ? 5 : d.y2 - d.y1;
          });
          dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
          _this.coord = world;
          return d3.csv('/static/csv/policy5_status.csv').get(function(error, datareport) {
            _this.datareport = datareport;
            datareport.forEach(function(d) {
              dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
              return d.timestamp = dateFormat.parse(d.healthtime);
            });
            return _this.evDispatch.attime(dateFormat.parse("2012-02-02 14:00:00"));
          });
        };
      })(this));
    };

    BWMapVirus.prototype.draw = function(time) {
      var report;
      this.svg.remove();
      this.svg = d3.select(this.parent).append("svg").attr({
        width: this.width,
        height: this.height
      });
      this.svg.append("svg:image").attr("xlink:href", "/static/images/BankWorld-binary.png").attr("x", "0").attr("y", "0").attr("width", this.width).attr("height", this.height);
      this.svg.insert("path", ".graticule").attr("class", "boundary").attr("d", "").attr('fill', "url(#img1)");
      this.svg.selectAll(".area").data(this.coord).enter().append("circle", ".area").attr({
        cx: function(d) {
          return d.x1;
        },
        cy: function(d) {
          return d.y1;
        },
        r: function(d) {
          return 0;
        },
        id: function(d) {
          return "bu_virus_" + d.businessunit;
        }
      }).style("stroke", "black").attr({
        "fill": "red",
        "fill-opacity": .8
      }).on("click", (function(_this) {
        return function(d) {
          return _this.evDispatch.selectRegion(d.businessunit);
        };
      })(this));
      this.svg.selectAll('circle').on("mouseover.tooltip", (function(_this) {
        return function(d) {
          _this.svg.select('#spread_data_id').remove();
          return _this.svg.append('text').text(d.businessunit).attr('x', d.x1).attr('y', d.y1 + 10).attr('id', 'spread_data_id').attr({
            stroke: 'blue',
            'stroke-width': '0.5'
          });
        };
      })(this));
      this.svg.selectAll('circle').on("mouseout.tooltip", (function(_this) {
        return function(d) {
          return _this.svg.select('#spread_data_id').transition().duration(20).style('opacity', 0).attr('transform', 'translate(10,-10)').remove();
        };
      })(this));
      report = this.datareport.filter((function(_this) {
        return function(d) {
          return +d.timestamp === +time;
        };
      })(this));
      report.forEach((function(_this) {
        return function(d) {
          return _this.svg.select("#bu_virus_" + d.businessunit).attr({
            r: function(x) {
              return 3 + (+d.numipaddr / 40);
            }
          });
        };
      })(this));
      return d3.select(self.frameElement).style("height", this.height + "px");
    };

    return BWMapVirus;

  })();

  BWReportMap = (function() {
    function BWReportMap(width, height, parent, evDispatch) {
      if (width == null) {
        width = 400;
      }
      if (height == null) {
        height = 300;
      }
      if (parent == null) {
        parent = "body";
      }
      this.width = width;
      this.height = height;
      this.evDispatch = evDispatch;
      this.projection = d3.geo.equirectangular();
      this.svg = d3.select(parent).append("svg").attr({
        width: this.width,
        height: this.height
      });
    }

    BWReportMap.prototype.draw = function() {
      return d3.csv('/static/csv/branch_lat_long.csv').get((function(_this) {
        return function(error, world) {
          world.forEach(function(d) {
            var _ref, _ref1;
            _ref = _this.projection([d.minlong, d.maxlat]), d.x1 = _ref[0], d.y1 = _ref[1];
            _ref1 = _this.projection([d.maxlong, d.minlat]), d.x2 = _ref1[0], d.y2 = _ref1[1];
            d.width = (d.x2 - d.x1) === 0 ? 5 : d.x2 - d.x1;
            return d.height = (d.y2 - d.y1) === 0 ? 5 : d.y2 - d.y1;
          });
          _this.svg.selectAll(".area").data(world).enter().append("rect", ".area").attr({
            x: function(d) {
              return d.x1;
            },
            y: function(d) {
              return d.y1;
            },
            width: function(d) {
              return d.width;
            },
            height: function(d) {
              return d.height;
            },
            id: function(d) {
              return "bu_" + d.businessunit;
            }
          }).style("stroke", "black").attr("fill", "white").on("click", function(d) {
            return _this.evDispatch.selectRegion(d.businessunit);
          });
          _this.svg.selectAll('rect').on("mouseover.tooltip", function(d) {
            _this.svg.select('#data_id').remove();
            return _this.svg.append('text').text(d.businessunit).attr('x', d.x1).attr('y', d.y1).attr('id', 'data_id');
          });
          _this.svg.selectAll('rect').on("mouseout.tooltip", function(d) {
            return _this.svg.select('#data_id').transition().duration(20).style('opacity', 0).attr('transform', 'translate(10,-10)').remove();
          });
          return d3.select(self.frameElement).style("height", _this.height + "px");
        };
      })(this));
    };

    return BWReportMap;

  })();

  MultiTimeSeriesPolicyChart = (function() {
    function MultiTimeSeriesPolicyChart(w, h, parent, title, evDispatch) {
      if (parent == null) {
        parent = "body";
      }
      if (title == null) {
        title = "";
      }
      this.margin = {
        top: 20,
        right: 60,
        bottom: 50,
        left: 60
      };
      this.width = w - this.margin.left - this.margin.right;
      this.height = h - this.margin.top - this.margin.bottom;
      this.parent = parent;
      this.allbudata = null;
      this.title = title;
      this.evDispatch = evDispatch;
      this.curregion = "headquarters";
      this.policystatus = ['p4', 'p5'];
    }

    MultiTimeSeriesPolicyChart.prototype.load = function(data) {
      var dateFormat;
      this.allbudata = data;
      dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
      return this.allbudata.forEach(function(d) {
        return d.timestamp = dateFormat.parse(d.healthtime);
      });
    };

    MultiTimeSeriesPolicyChart.prototype.draw = function(region) {
      var button, canvas, color_scale, data, svg, x, xAxis, y, yAxis;
      if (region == null) {
        region = "headquarters";
      }
      this.curregion = region;
      color_scale = d3.scale.category10().domain(["p1", "p2", "p3", "p4", "p5", "a1", "a2", "a3", "a4", "a5"]);
      button = d3.select(this.parent).selectAll("button").data(["p1", "p2", "p3", "p4", "p5", "a1", "a2", "a3", "a4", "a5"]).enter().append('button').attr("type", "button").attr({
        "class": "btn btn-xs",
        id: function(d) {
          return d;
        }
      }).style('background-color', function(d) {
        return color_scale(d);
      }).text(function(d) {
        return d;
      });
      button.on("click", (function(_this) {
        return function(d) {
          if (__indexOf.call(_this.policystatus, d) < 0) {
            _this.policystatus.push(d);
          } else {
            _this.policystatus = _this.policystatus.filter(function(val) {
              return d !== val;
            });
          }
          return _this.draw(_this.curregion);
        };
      })(this));
      data = this.allbudata.filter((function(_this) {
        return function(d) {
          return d.businessunit === region;
        };
      })(this));
      d3.select(this.parent).selectAll("svg").remove();
      canvas = d3.select(this.parent).append('svg').attr({
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom
      });
      svg = canvas.append('g').attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      x = d3.time.scale().range([0, this.width]);
      x.domain(d3.extent(data, function(d) {
        return d.timestamp;
      }));
      y = d3.scale.linear().range([this.height, 0]);
      y.domain([
        d3.min(data, (function(_this) {
          return function(d) {
            var s;
            return d3.min((function() {
              var _i, _len, _ref, _results;
              _ref = this.policystatus;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _results.push(+d[s]);
              }
              return _results;
            }).call(_this));
          };
        })(this)), d3.max(data, (function(_this) {
          return function(d) {
            var s;
            return d3.max((function() {
              var _i, _len, _ref, _results;
              _ref = this.policystatus;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _results.push(+d[s]);
              }
              return _results;
            }).call(_this));
          };
        })(this))
      ]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      color_scale = d3.scale.category10().domain(["p1", "p2", "p3", "p4", "p5", "a1", "a2", "a3", "a4", "a5"]);
      this.policystatus.forEach((function(_this) {
        return function(policystatus) {
          return svg.append("path").datum(data).attr("class", "line").attr({
            d: d3.svg.line().x(function(d) {
              return x(d.timestamp);
            }).y(function(d) {
              return y(+d[policystatus]);
            }),
            stroke: color_scale(policystatus)
          });
        };
      })(this));
      svg.append('rect').attr({
        "class": 'overlay',
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom,
        fill: 'none',
        'pointer-events': 'all'
      });
      svg.on("mousemove", (function(_this) {
        return function() {
          var bisectDate, d, d0, d1, data_list, i, num_policy_in_text, tootltip_box, x0;
          x0 = x.invert(d3.mouse(d3.event.target)[0]);
          bisectDate = d3.bisector(function(d) {
            return d.timestamp;
          }).left;
          i = bisectDate(data, x0, 1);
          d0 = data[i - 1];
          d1 = data[i];
          d = x0 - d0.date > d1.date - x0 ? d1 : d0;
          data_list = data.filter(function(d) {
            return d.timestamp === d0.timestamp;
          });
          svg.select('#policystatus_tooltip_line').remove();
          svg.append('line').attr({
            x1: x(d.timestamp),
            y1: 0,
            x2: x(d.timestamp),
            y2: _this.height,
            stroke: 'green',
            'stroke-width': 2,
            id: 'policystatus_tooltip_line'
          });
          svg.select('#policystatus_data_id').remove();
          tootltip_box = svg.append('g').attr('id', 'policystatus_data_id');
          tootltip_box.append('text').text(d['healthtime']).attr('x', x(d.timestamp) + 10).attr('y', 30).attr('stroke', 'green').attr('stroke-width', 0.5);
          num_policy_in_text = 1;
          return _this.policystatus.forEach(function(policystatus) {
            tootltip_box.append('text').text("" + policystatus + ": " + d[policystatus]).attr('x', x(d.timestamp) + 10).attr('y', 30 + num_policy_in_text * 10).attr('stroke', 'green').attr('stroke-width', 0.5);
            return num_policy_in_text = num_policy_in_text + 1;
          });
        };
      })(this));
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(xAxis);
      svg.append("g").attr("class", "y axis").call(yAxis);
      canvas.append("text").attr("transform", "translate(0,30) rotate(-90)").attr("y", 10).attr("dy", ".71em").style("text-anchor", "end").text("Machine Count");
      return svg.append("text").attr("x", this.width / 2).attr("y", 0 - (this.margin.top / 2)).attr("text-anchor", "middle").attr("class", "chart-title").text(this.curregion);
    };

    return MultiTimeSeriesPolicyChart;

  })();

  WsConnectionsChart = (function() {
    function WsConnectionsChart(w, h, parent, title, evDispatch) {
      if (parent == null) {
        parent = "body";
      }
      if (title == null) {
        title = "";
      }
      this.margin = {
        top: 20,
        right: 60,
        bottom: 50,
        left: 60
      };
      this.width = w - this.margin.left - this.margin.right;
      this.height = h - this.margin.top - this.margin.bottom;
      this.parent = parent;
      this.allbudata = null;
      this.title = title;
      this.evDispatch = evDispatch;
      this.curregion = "headquarters";
      this.policystatus = ["teller", "loan", "office"];
    }

    WsConnectionsChart.prototype.load = function(data) {
      var dateFormat;
      this.allbudata = data;
      dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
      return this.allbudata.forEach(function(d) {
        return d.timestamp = dateFormat.parse(d.healthtime);
      });
    };

    WsConnectionsChart.prototype.draw = function(region) {
      var button, canvas, color_scale, data, svg, x, xAxis, y, yAxis;
      if (region == null) {
        region = "headquarters";
      }
      this.curregion = region;
      color_scale = d3.scale.category10().domain(["teller", "loan", "office"]);
      button = d3.select(this.parent).selectAll("button").data(["teller", "loan", "office"]).enter().append('button').attr("type", "button").attr({
        "class": "btn btn-xs",
        id: function(d) {
          return d;
        }
      }).style('background-color', function(d) {
        return color_scale(d);
      }).text(function(d) {
        return d;
      });
      button.on("click", (function(_this) {
        return function(d) {
          if (__indexOf.call(_this.policystatus, d) < 0) {
            _this.policystatus.push(d);
          } else {
            _this.policystatus = _this.policystatus.filter(function(val) {
              return d !== val;
            });
          }
          return _this.draw(_this.curregion);
        };
      })(this));
      data = this.allbudata.filter((function(_this) {
        return function(d) {
          return d.businessunit === region;
        };
      })(this));
      d3.select(this.parent).selectAll("svg").remove();
      canvas = d3.select(this.parent).append('svg').attr({
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom
      });
      svg = canvas.append('g').attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      x = d3.time.scale().range([0, this.width]);
      x.domain(d3.extent(data, function(d) {
        return d.timestamp;
      }));
      y = d3.scale.linear().range([this.height, 0]);
      y.domain([
        d3.min(data, (function(_this) {
          return function(d) {
            var s;
            return d3.min((function() {
              var _i, _len, _ref, _results;
              _ref = this.policystatus;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _results.push(+d["" + s + "_avg_conn"]);
              }
              return _results;
            }).call(_this));
          };
        })(this)), d3.max(data, (function(_this) {
          return function(d) {
            var s;
            return d3.max((function() {
              var _i, _len, _ref, _results;
              _ref = this.policystatus;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _results.push(+d["" + s + "_avg_conn"]);
              }
              return _results;
            }).call(_this));
          };
        })(this))
      ]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      color_scale = d3.scale.category10().domain(["teller", "loan", "office"]);
      this.policystatus.forEach((function(_this) {
        return function(policystatus) {
          return svg.append("path").datum(data).attr("class", "line").attr({
            d: d3.svg.line().x(function(d) {
              return x(d.timestamp);
            }).y(function(d) {
              return y(+d["" + policystatus + "_avg_conn"]);
            }),
            stroke: color_scale(policystatus)
          });
        };
      })(this));
      svg.append('rect').attr({
        "class": 'overlay',
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom,
        fill: 'none',
        'pointer-events': 'all'
      });
      svg.on("mousemove", (function(_this) {
        return function() {
          var bisectDate, d, d0, d1, data_list, i, num_policy_in_text, tootltip_box, x0;
          x0 = x.invert(d3.mouse(d3.event.target)[0]);
          bisectDate = d3.bisector(function(d) {
            return d.timestamp;
          }).left;
          i = bisectDate(data, x0, 1);
          d0 = data[i - 1];
          d1 = data[i];
          d = x0 - d0.date > d1.date - x0 ? d1 : d0;
          data_list = data.filter(function(d) {
            return d.timestamp === d0.timestamp;
          });
          svg.select('#ws_conn_tooltip_line').remove();
          svg.append('line').attr({
            x1: x(d.timestamp),
            y1: 0,
            x2: x(d.timestamp),
            y2: _this.height,
            stroke: 'green',
            'stroke-width': 2,
            id: 'ws_conn_tooltip_line'
          });
          svg.select('#ws_conn_data_id').remove();
          tootltip_box = svg.append('g').attr('id', 'ws_conn_data_id');
          tootltip_box.append('text').text(d['healthtime']).attr('x', x(d.timestamp) + 10).attr('y', 30).attr('stroke', 'green').attr('stroke-width', 0.5);
          num_policy_in_text = 1;
          return _this.policystatus.forEach(function(policystatus) {
            tootltip_box.append('text').text("" + policystatus + ": " + d[policystatus + '_avg_conn']).attr('x', x(d.timestamp) + 10).attr('y', 30 + num_policy_in_text * 10).attr('stroke', 'green').attr('stroke-width', 0.5);
            return num_policy_in_text = num_policy_in_text + 1;
          });
        };
      })(this));
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(xAxis);
      svg.append("g").attr("class", "y axis").call(yAxis);
      canvas.append("text").attr("transform", "translate(0,30) rotate(-90)").attr("y", 10).attr("dy", ".71em").style("text-anchor", "end").text("Average Connections");
      return svg.append("text").attr("x", this.width / 2).attr("y", 0 - (this.margin.top / 2)).attr("text-anchor", "middle").attr("class", "chart-title").text(this.curregion);
    };

    return WsConnectionsChart;

  })();

  ServerConnectionsChart = (function() {
    function ServerConnectionsChart(w, h, parent, title, evDispatch) {
      if (parent == null) {
        parent = "body";
      }
      if (title == null) {
        title = "";
      }
      this.margin = {
        top: 20,
        right: 60,
        bottom: 50,
        left: 60
      };
      this.width = w - this.margin.left - this.margin.right;
      this.height = h - this.margin.top - this.margin.bottom;
      this.parent = parent;
      this.allbudata = null;
      this.title = title;
      this.evDispatch = evDispatch;
      this.curregion = "headquarters";
      this.policystatus = ["file_server", "multiple"];
    }

    ServerConnectionsChart.prototype.load = function(data) {
      var dateFormat;
      this.allbudata = data;
      dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
      return this.allbudata.forEach(function(d) {
        return d.timestamp = dateFormat.parse(d.healthtime);
      });
    };

    ServerConnectionsChart.prototype.draw = function(region) {
      var button, canvas, color_scale, data, svg, x, xAxis, y, yAxis;
      if (region == null) {
        region = "headquarters";
      }
      this.curregion = region;
      color_scale = d3.scale.category10().domain(["file_server", "multiple", "email", "compute", "web"]);
      button = d3.select(this.parent).selectAll("button").data(["file_server", "multiple", "email", "compute", "web"]).enter().append('button').attr("type", "button").attr({
        "class": "btn btn-xs",
        id: function(d) {
          return d;
        }
      }).style('background-color', function(d) {
        return color_scale(d);
      }).text(function(d) {
        return d;
      });
      button.on("click", (function(_this) {
        return function(d) {
          if (__indexOf.call(_this.policystatus, d) < 0) {
            _this.policystatus.push(d);
          } else {
            _this.policystatus = _this.policystatus.filter(function(val) {
              return d !== val;
            });
          }
          return _this.draw(_this.curregion);
        };
      })(this));
      data = this.allbudata.filter((function(_this) {
        return function(d) {
          return d.businessunit === region;
        };
      })(this));
      console.log(data);
      d3.select(this.parent).selectAll("svg").remove();
      canvas = d3.select(this.parent).append('svg').attr({
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom
      });
      svg = canvas.append('g').attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      x = d3.time.scale().range([0, this.width]);
      x.domain(d3.extent(data, function(d) {
        return d.timestamp;
      }));
      y = d3.scale.linear().range([this.height, 0]);
      y.domain([
        d3.min(data, (function(_this) {
          return function(d) {
            var s;
            return d3.min((function() {
              var _i, _len, _ref, _results;
              _ref = this.policystatus;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _results.push(+d["" + s + "_avg_conn"]);
              }
              return _results;
            }).call(_this));
          };
        })(this)), d3.max(data, (function(_this) {
          return function(d) {
            var s;
            return d3.max((function() {
              var _i, _len, _ref, _results;
              _ref = this.policystatus;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _results.push(+d["" + s + "_avg_conn"]);
              }
              return _results;
            }).call(_this));
          };
        })(this))
      ]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      this.policystatus.forEach((function(_this) {
        return function(policystatus) {
          return svg.append("path").datum(data).attr("class", "line").attr({
            d: d3.svg.line().x(function(d) {
              return x(d.timestamp);
            }).y(function(d) {
              return y(+d["" + policystatus + "_avg_conn"]);
            }),
            stroke: color_scale(policystatus)
          });
        };
      })(this));
      svg.append('rect').attr({
        "class": 'overlay',
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom,
        fill: 'none',
        'pointer-events': 'all'
      });
      svg.on("mousemove", (function(_this) {
        return function() {
          var bisectDate, d, d0, d1, data_list, i, num_policy_in_text, tootltip_box, x0;
          x0 = x.invert(d3.mouse(d3.event.target)[0]);
          bisectDate = d3.bisector(function(d) {
            return d.timestamp;
          }).left;
          i = bisectDate(data, x0, 1);
          d0 = data[i - 1];
          d1 = data[i];
          d = x0 - d0.date > d1.date - x0 ? d1 : d0;
          data_list = data.filter(function(d) {
            return d.timestamp === d0.timestamp;
          });
          svg.select('#server_conn_tooltip_line').remove();
          svg.append('line').attr({
            x1: x(d.timestamp),
            y1: 0,
            x2: x(d.timestamp),
            y2: _this.height,
            stroke: 'green',
            'stroke-width': 2,
            id: 'server_conn_tooltip_line'
          });
          svg.select('#server_conn_data_id').remove();
          tootltip_box = svg.append('g').attr('id', 'server_conn_data_id');
          tootltip_box.append('text').text(d['healthtime']).attr('x', x(d.timestamp) + 10).attr('y', 30).attr('stroke', 'green').attr('stroke-width', 0.5);
          num_policy_in_text = 1;
          return _this.policystatus.forEach(function(policystatus) {
            tootltip_box.append('text').text("" + policystatus + ": " + d[policystatus + '_avg_conn']).attr('x', x(d.timestamp) + 10).attr('y', 30 + num_policy_in_text * 10).attr('stroke', 'green').attr('stroke-width', 0.5);
            return num_policy_in_text = num_policy_in_text + 1;
          });
        };
      })(this));
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(xAxis);
      svg.append("g").attr("class", "y axis").call(yAxis);
      canvas.append("text").attr("transform", "translate(0,30) rotate(-90)").attr("y", 10).attr("dy", ".71em").style("text-anchor", "end").text("Average Connections");
      return svg.append("text").attr("x", this.width / 2).attr("y", 0 - (this.margin.top / 2)).attr("text-anchor", "middle").attr("class", "chart-title").text(this.curregion);
    };

    return ServerConnectionsChart;

  })();

  HeatMap = (function() {
    function HeatMap(w, h, parent, title, evDispatch) {
      var _ref;
      if (w == null) {
        w = 1400;
      }
      if (h == null) {
        h = 900;
      }
      if (parent == null) {
        parent = "body";
      }
      if (title == null) {
        title = "";
      }
      this.margin = {
        top: 20,
        right: 60,
        bottom: 50,
        left: 60
      };
      this.width = w - this.margin.left - this.margin.right;
      this.height = h - this.margin.top - this.margin.bottom;
      this.parent = parent;
      this.allbudata = null;
      this.title = title;
      this.evDispatch = evDispatch;
      this.curregion = "headquarters";
      _ref = [700, 300], this.legendWidth = _ref[0], this.legendHeight = _ref[1];
      this.legendPadding = 100;
      this.padding = 150;
      this.barPadding = 1;
      this.mintime = '2012-02-02 01:30:00';
      this.maxtime = '2012-02-04 08:00:00';
      this.tmin = 0.2;
      this.tmax = 1;
      this.colPick = ['erspreadmax', 'erspreadmin'];
      this.scales = {};
      this.palette = {
        erspreadmax: 'blue',
        erspreadmin: 'red',
        showregion: 'red',
        showtime: 'red',
        pol1: 'green',
        pol2: 'purple',
        pol3: 'red',
        pol4: '#bcbd22',
        pol5: 'red',
        act1: 'blue',
        act2: 'purple',
        act3: 'orange',
        act4: 'green',
        act5: 'brown'
      };
      this.regions = ["region-35", "region-34", "region-2", "region-36", "region-11", "region-1", "region-37", "region-49", "region-41", "region-50", "region-33", "region-32", "region-48", "region-39", "region-47", "region-46", "region-8", "region-12", "region-43", "region-13", "region-44", "region-31", "region-9", "region-45", "region-40", "region-3", "region-42", "region-10", "region-14", "region-30", "region-6", "region-15", "region-17", "region-16", "region-29", "region-38", "region-20", "region-19", "region-5", "region-18", "headquarters-1", "region-7", "region-27", "region-28", "region-23", "region-4", "region-22", "region-21", "region-26", "region-24", "region-25"];
      this.times = ['2012-02-01 23:00:00', '2012-02-01 23:15:00', '2012-02-01 23:30:00', '2012-02-01 23:45:00', '2012-02-02 00:00:00', '2012-02-02 00:15:00', '2012-02-02 00:30:00', '2012-02-02 00:45:00', '2012-02-02 01:00:00', '2012-02-02 01:15:00', '2012-02-02 01:30:00', '2012-02-02 01:45:00', '2012-02-02 02:00:00', '2012-02-02 02:15:00', '2012-02-02 02:30:00', '2012-02-02 02:45:00', '2012-02-02 03:00:00', '2012-02-02 03:15:00', '2012-02-02 03:30:00', '2012-02-02 03:45:00', '2012-02-02 04:00:00', '2012-02-02 04:15:00', '2012-02-02 04:30:00', '2012-02-02 04:45:00', '2012-02-02 05:00:00', '2012-02-02 05:15:00', '2012-02-02 05:30:00', '2012-02-02 05:45:00', '2012-02-02 06:00:00', '2012-02-02 06:15:00', '2012-02-02 06:30:00', '2012-02-02 06:45:00', '2012-02-02 07:00:00', '2012-02-02 07:15:00', '2012-02-02 07:30:00', '2012-02-02 07:45:00', '2012-02-02 08:00:00', '2012-02-02 08:15:00', '2012-02-02 08:30:00', '2012-02-02 08:45:00', '2012-02-02 09:00:00', '2012-02-02 09:15:00', '2012-02-02 09:30:00', '2012-02-02 09:45:00', '2012-02-02 10:00:00', '2012-02-02 10:15:00', '2012-02-02 10:30:00', '2012-02-02 10:45:00', '2012-02-02 11:00:00', '2012-02-02 11:15:00', '2012-02-02 11:30:00', '2012-02-02 11:45:00', '2012-02-02 12:00:00', '2012-02-02 12:15:00', '2012-02-02 12:30:00', '2012-02-02 12:45:00', '2012-02-02 13:00:00', '2012-02-02 13:15:00', '2012-02-02 13:30:00', '2012-02-02 13:45:00', '2012-02-02 14:00:00', '2012-02-02 14:15:00', '2012-02-02 14:30:00', '2012-02-02 14:45:00', '2012-02-02 15:00:00', '2012-02-02 15:15:00', '2012-02-02 15:30:00', '2012-02-02 15:45:00', '2012-02-02 16:00:00', '2012-02-02 16:15:00', '2012-02-02 16:30:00', '2012-02-02 16:45:00', '2012-02-02 17:00:00', '2012-02-02 17:15:00', '2012-02-02 17:30:00', '2012-02-02 17:45:00', '2012-02-02 18:00:00', '2012-02-02 18:15:00', '2012-02-02 18:30:00', '2012-02-02 18:45:00', '2012-02-02 19:00:00', '2012-02-02 19:15:00', '2012-02-02 19:30:00', '2012-02-02 19:45:00', '2012-02-02 20:00:00', '2012-02-02 20:15:00', '2012-02-02 20:30:00', '2012-02-02 20:45:00', '2012-02-02 21:00:00', '2012-02-02 21:15:00', '2012-02-02 21:30:00', '2012-02-02 21:45:00', '2012-02-02 22:00:00', '2012-02-02 22:15:00', '2012-02-02 22:30:00', '2012-02-02 22:45:00', '2012-02-02 23:00:00', '2012-02-02 23:15:00', '2012-02-02 23:30:00', '2012-02-02 23:45:00', '2012-02-03 00:00:00', '2012-02-03 00:15:00', '2012-02-03 00:30:00', '2012-02-03 00:45:00', '2012-02-03 01:00:00', '2012-02-03 01:15:00', '2012-02-03 01:30:00', '2012-02-03 01:45:00', '2012-02-03 02:00:00', '2012-02-03 02:15:00', '2012-02-03 02:30:00', '2012-02-03 02:45:00', '2012-02-03 03:00:00', '2012-02-03 03:15:00', '2012-02-03 03:30:00', '2012-02-03 03:45:00', '2012-02-03 04:00:00', '2012-02-03 04:15:00', '2012-02-03 04:30:00', '2012-02-03 04:45:00', '2012-02-03 05:00:00', '2012-02-03 05:15:00', '2012-02-03 05:30:00', '2012-02-03 05:45:00', '2012-02-03 06:00:00', '2012-02-03 06:15:00', '2012-02-03 06:30:00', '2012-02-03 06:45:00', '2012-02-03 07:00:00', '2012-02-03 07:15:00', '2012-02-03 07:30:00', '2012-02-03 07:45:00', '2012-02-03 08:00:00', '2012-02-03 08:15:00', '2012-02-03 08:30:00', '2012-02-03 08:45:00', '2012-02-03 09:00:00', '2012-02-03 09:15:00', '2012-02-03 09:30:00', '2012-02-03 09:45:00', '2012-02-03 10:00:00', '2012-02-03 10:15:00', '2012-02-03 10:30:00', '2012-02-03 10:45:00', '2012-02-03 11:00:00', '2012-02-03 11:15:00', '2012-02-03 11:30:00', '2012-02-03 11:45:00', '2012-02-03 12:00:00', '2012-02-03 12:15:00', '2012-02-03 12:30:00', '2012-02-03 12:45:00', '2012-02-03 13:00:00', '2012-02-03 13:15:00', '2012-02-03 13:30:00', '2012-02-03 13:45:00', '2012-02-03 14:00:00', '2012-02-03 14:15:00', '2012-02-03 14:30:00', '2012-02-03 14:45:00', '2012-02-03 15:00:00', '2012-02-03 15:15:00', '2012-02-03 15:30:00', '2012-02-03 15:45:00', '2012-02-03 16:00:00', '2012-02-03 16:15:00', '2012-02-03 16:30:00', '2012-02-03 16:45:00', '2012-02-03 17:00:00', '2012-02-03 17:15:00', '2012-02-03 17:30:00', '2012-02-03 17:45:00', '2012-02-03 18:00:00', '2012-02-03 18:15:00', '2012-02-03 18:30:00', '2012-02-03 18:45:00', '2012-02-03 19:00:00', '2012-02-03 19:15:00', '2012-02-03 19:30:00', '2012-02-03 19:45:00', '2012-02-03 20:00:00', '2012-02-03 20:15:00', '2012-02-03 20:30:00', '2012-02-03 20:45:00', '2012-02-03 21:00:00', '2012-02-03 21:15:00', '2012-02-03 21:30:00', '2012-02-03 21:45:00', '2012-02-03 22:00:00', '2012-02-03 22:15:00', '2012-02-03 22:30:00', '2012-02-03 22:45:00', '2012-02-03 23:00:00', '2012-02-03 23:15:00', '2012-02-03 23:30:00', '2012-02-03 23:45:00', '2012-02-04 00:00:00', '2012-02-04 00:15:00', '2012-02-04 00:30:00', '2012-02-04 00:45:00', '2012-02-04 01:00:00', '2012-02-04 01:15:00', '2012-02-04 01:30:00', '2012-02-04 01:45:00', '2012-02-04 02:00:00', '2012-02-04 02:15:00', '2012-02-04 02:30:00', '2012-02-04 02:45:00', '2012-02-04 03:00:00', '2012-02-04 03:15:00', '2012-02-04 03:30:00', '2012-02-04 03:45:00', '2012-02-04 04:00:00', '2012-02-04 04:15:00', '2012-02-04 04:30:00', '2012-02-04 04:45:00', '2012-02-04 05:00:00', '2012-02-04 05:15:00', '2012-02-04 05:30:00', '2012-02-04 05:45:00', '2012-02-04 06:00:00', '2012-02-04 06:15:00', '2012-02-04 06:30:00', '2012-02-04 06:45:00', '2012-02-04 07:00:00', '2012-02-04 07:15:00', '2012-02-04 07:30:00', '2012-02-04 07:45:00', '2012-02-04 08:00:00'];
      this.reverseTimes = ['2012-02-04 08:00:00', '2012-02-04 07:45:00', '2012-02-04 07:30:00', '2012-02-04 07:15:00', '2012-02-04 07:00:00', '2012-02-04 06:45:00', '2012-02-04 06:30:00', '2012-02-04 06:15:00', '2012-02-04 06:00:00', '2012-02-04 05:45:00', '2012-02-04 05:30:00', '2012-02-04 05:15:00', '2012-02-04 05:00:00', '2012-02-04 04:45:00', '2012-02-04 04:30:00', '2012-02-04 04:15:00', '2012-02-04 04:00:00', '2012-02-04 03:45:00', '2012-02-04 03:30:00', '2012-02-04 03:15:00', '2012-02-04 03:00:00', '2012-02-04 02:45:00', '2012-02-04 02:30:00', '2012-02-04 02:15:00', '2012-02-04 02:00:00', '2012-02-04 01:45:00', '2012-02-04 01:30:00', '2012-02-04 01:15:00', '2012-02-04 01:00:00', '2012-02-04 00:45:00', '2012-02-04 00:30:00', '2012-02-04 00:15:00', '2012-02-04 00:00:00', '2012-02-03 23:45:00', '2012-02-03 23:30:00', '2012-02-03 23:15:00', '2012-02-03 23:00:00', '2012-02-03 22:45:00', '2012-02-03 22:30:00', '2012-02-03 22:15:00', '2012-02-03 22:00:00', '2012-02-03 21:45:00', '2012-02-03 21:30:00', '2012-02-03 21:15:00', '2012-02-03 21:00:00', '2012-02-03 20:45:00', '2012-02-03 20:30:00', '2012-02-03 20:15:00', '2012-02-03 20:00:00', '2012-02-03 19:45:00', '2012-02-03 19:30:00', '2012-02-03 19:15:00', '2012-02-03 19:00:00', '2012-02-03 18:45:00', '2012-02-03 18:30:00', '2012-02-03 18:15:00', '2012-02-03 18:00:00', '2012-02-03 17:45:00', '2012-02-03 17:30:00', '2012-02-03 17:15:00', '2012-02-03 17:00:00', '2012-02-03 16:45:00', '2012-02-03 16:30:00', '2012-02-03 16:15:00', '2012-02-03 16:00:00', '2012-02-03 15:45:00', '2012-02-03 15:30:00', '2012-02-03 15:15:00', '2012-02-03 15:00:00', '2012-02-03 14:45:00', '2012-02-03 14:30:00', '2012-02-03 14:15:00', '2012-02-03 14:00:00', '2012-02-03 13:45:00', '2012-02-03 13:30:00', '2012-02-03 13:15:00', '2012-02-03 13:00:00', '2012-02-03 12:45:00', '2012-02-03 12:30:00', '2012-02-03 12:15:00', '2012-02-03 12:00:00', '2012-02-03 11:45:00', '2012-02-03 11:30:00', '2012-02-03 11:15:00', '2012-02-03 11:00:00', '2012-02-03 10:45:00', '2012-02-03 10:30:00', '2012-02-03 10:15:00', '2012-02-03 10:00:00', '2012-02-03 09:45:00', '2012-02-03 09:30:00', '2012-02-03 09:15:00', '2012-02-03 09:00:00', '2012-02-03 08:45:00', '2012-02-03 08:30:00', '2012-02-03 08:15:00', '2012-02-03 08:00:00', '2012-02-03 07:45:00', '2012-02-03 07:30:00', '2012-02-03 07:15:00', '2012-02-03 07:00:00', '2012-02-03 06:45:00', '2012-02-03 06:30:00', '2012-02-03 06:15:00', '2012-02-03 06:00:00', '2012-02-03 05:45:00', '2012-02-03 05:30:00', '2012-02-03 05:15:00', '2012-02-03 05:00:00', '2012-02-03 04:45:00', '2012-02-03 04:30:00', '2012-02-03 04:15:00', '2012-02-03 04:00:00', '2012-02-03 03:45:00', '2012-02-03 03:30:00', '2012-02-03 03:15:00', '2012-02-03 03:00:00', '2012-02-03 02:45:00', '2012-02-03 02:30:00', '2012-02-03 02:15:00', '2012-02-03 02:00:00', '2012-02-03 01:45:00', '2012-02-03 01:30:00', '2012-02-03 01:15:00', '2012-02-03 01:00:00', '2012-02-03 00:45:00', '2012-02-03 00:30:00', '2012-02-03 00:15:00', '2012-02-03 00:00:00', '2012-02-02 23:45:00', '2012-02-02 23:30:00', '2012-02-02 23:15:00', '2012-02-02 23:00:00', '2012-02-02 22:45:00', '2012-02-02 22:30:00', '2012-02-02 22:15:00', '2012-02-02 22:00:00', '2012-02-02 21:45:00', '2012-02-02 21:30:00', '2012-02-02 21:15:00', '2012-02-02 21:00:00', '2012-02-02 20:45:00', '2012-02-02 20:30:00', '2012-02-02 20:15:00', '2012-02-02 20:00:00', '2012-02-02 19:45:00', '2012-02-02 19:30:00', '2012-02-02 19:15:00', '2012-02-02 19:00:00', '2012-02-02 18:45:00', '2012-02-02 18:30:00', '2012-02-02 18:15:00', '2012-02-02 18:00:00', '2012-02-02 17:45:00', '2012-02-02 17:30:00', '2012-02-02 17:15:00', '2012-02-02 17:00:00', '2012-02-02 16:45:00', '2012-02-02 16:30:00', '2012-02-02 16:15:00', '2012-02-02 16:00:00', '2012-02-02 15:45:00', '2012-02-02 15:30:00', '2012-02-02 15:15:00', '2012-02-02 15:00:00', '2012-02-02 14:45:00', '2012-02-02 14:30:00', '2012-02-02 14:15:00', '2012-02-02 14:00:00', '2012-02-02 13:45:00', '2012-02-02 13:30:00', '2012-02-02 13:15:00', '2012-02-02 13:00:00', '2012-02-02 12:45:00', '2012-02-02 12:30:00', '2012-02-02 12:15:00', '2012-02-02 12:00:00', '2012-02-02 11:45:00', '2012-02-02 11:30:00', '2012-02-02 11:15:00', '2012-02-02 11:00:00', '2012-02-02 10:45:00', '2012-02-02 10:30:00', '2012-02-02 10:15:00', '2012-02-02 10:00:00', '2012-02-02 09:45:00', '2012-02-02 09:30:00', '2012-02-02 09:15:00', '2012-02-02 09:00:00', '2012-02-02 08:45:00', '2012-02-02 08:30:00', '2012-02-02 08:15:00', '2012-02-02 08:00:00', '2012-02-02 07:45:00', '2012-02-02 07:30:00', '2012-02-02 07:15:00', '2012-02-02 07:00:00', '2012-02-02 06:45:00', '2012-02-02 06:30:00', '2012-02-02 06:15:00', '2012-02-02 06:00:00', '2012-02-02 05:45:00', '2012-02-02 05:30:00', '2012-02-02 05:15:00', '2012-02-02 05:00:00', '2012-02-02 04:45:00', '2012-02-02 04:30:00', '2012-02-02 04:15:00', '2012-02-02 04:00:00', '2012-02-02 03:45:00', '2012-02-02 03:30:00', '2012-02-02 03:15:00', '2012-02-02 03:00:00', '2012-02-02 02:45:00', '2012-02-02 02:30:00', '2012-02-02 02:15:00', '2012-02-02 02:00:00', '2012-02-02 01:45:00', '2012-02-02 01:30:00', '2012-02-02 01:15:00', '2012-02-02 01:00:00', '2012-02-02 00:45:00', '2012-02-02 00:30:00', '2012-02-02 00:15:00', '2012-02-02 00:00:00', '2012-02-01 23:45:00', '2012-02-01 23:30:00', '2012-02-01 23:15:00', '2012-02-01 23:00:00'];
      this.timelabels = ['2012-02-01 23:00:00', '2012-02-02 00:00:00', '2012-02-02 01:00:00', '2012-02-02 02:00:00', '2012-02-02 03:00:00', '2012-02-02 04:00:00', '2012-02-02 05:00:00', '2012-02-02 06:00:00', '2012-02-02 07:00:00', '2012-02-02 08:00:00', '2012-02-02 09:00:00', '2012-02-02 10:00:00', '2012-02-02 11:00:00', '2012-02-02 12:00:00', '2012-02-02 13:00:00', '2012-02-02 14:00:00', '2012-02-02 15:00:00', '2012-02-02 16:00:00', '2012-02-02 17:00:00', '2012-02-02 18:00:00', '2012-02-02 19:00:00', '2012-02-02 20:00:00', '2012-02-02 21:00:00', '2012-02-02 22:00:00', '2012-02-02 23:00:00', '2012-02-03 00:00:00', '2012-02-03 01:00:00', '2012-02-03 02:00:00', '2012-02-03 03:00:00', '2012-02-03 04:00:00', '2012-02-03 05:00:00', '2012-02-03 06:00:00', '2012-02-03 07:00:00', '2012-02-03 08:00:00', '2012-02-03 09:00:00', '2012-02-03 10:00:00', '2012-02-03 11:00:00', '2012-02-03 12:00:00', '2012-02-03 13:00:00', '2012-02-03 14:00:00', '2012-02-03 15:00:00', '2012-02-03 16:00:00', '2012-02-03 17:00:00', '2012-02-03 18:00:00', '2012-02-03 19:00:00', '2012-02-03 20:00:00', '2012-02-03 21:00:00', '2012-02-03 22:00:00', '2012-02-03 23:00:00', '2012-02-04 00:00:00', '2012-02-04 01:00:00', '2012-02-04 02:00:00', '2012-02-04 03:00:00', '2012-02-04 04:00:00', '2012-02-04 05:00:00', '2012-02-04 06:00:00', '2012-02-04 07:00:00', '2012-02-04 08:00:00'];
      this.reverseTimeLabels = ['2012-02-04 08:00:00', '2012-02-04 07:00:00', '2012-02-04 06:00:00', '2012-02-04 05:00:00', '2012-02-04 04:00:00', '2012-02-04 03:00:00', '2012-02-04 02:00:00', '2012-02-04 01:00:00', '2012-02-04 00:00:00', '2012-02-03 23:00:00', '2012-02-03 22:00:00', '2012-02-03 21:00:00', '2012-02-03 20:00:00', '2012-02-03 19:00:00', '2012-02-03 18:00:00', '2012-02-03 17:00:00', '2012-02-03 16:00:00', '2012-02-03 15:00:00', '2012-02-03 14:00:00', '2012-02-03 13:00:00', '2012-02-03 12:00:00', '2012-02-03 11:00:00', '2012-02-03 10:00:00', '2012-02-03 09:00:00', '2012-02-03 08:00:00', '2012-02-03 07:00:00', '2012-02-03 06:00:00', '2012-02-03 05:00:00', '2012-02-03 04:00:00', '2012-02-03 03:00:00', '2012-02-03 02:00:00', '2012-02-03 01:00:00', '2012-02-03 00:00:00', '2012-02-02 23:00:00', '2012-02-02 22:00:00', '2012-02-02 21:00:00', '2012-02-02 20:00:00', '2012-02-02 19:00:00', '2012-02-02 18:00:00', '2012-02-02 17:00:00', '2012-02-02 16:00:00', '2012-02-02 15:00:00', '2012-02-02 14:00:00', '2012-02-02 13:00:00', '2012-02-02 12:00:00', '2012-02-02 11:00:00', '2012-02-02 10:00:00', '2012-02-02 09:00:00', '2012-02-02 08:00:00', '2012-02-02 07:00:00', '2012-02-02 06:00:00', '2012-02-02 05:00:00', '2012-02-02 04:00:00', '2012-02-02 03:00:00', '2012-02-02 02:00:00', '2012-02-02 01:00:00', '2012-02-02 00:00:00', '2012-02-01 23:00:00'];
      this.rectWidth = (this.width - 2 * this.padding) / this.regions.length;
      this.innerRectWidth = this.rectWidth / this.colPick.length;
      this.alldata = [];
      this.alllocdata = [];
    }

    HeatMap.prototype.load = function(d, c) {
      var dateFormat;
      this.alldata = d;
      this.alllocdata = c;
      dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
      return this.alldata.forEach((function(_this) {
        return function(dat) {
          return dat.timestamp = dateFormat.parse(dat.time);
        };
      })(this));
    };

    HeatMap.prototype.draw = function(start_time, end_time, timecount) {
      var dataset, dataset2, i, rectHeight, showCurrentTime, showregion, showtime, svgHeat, svgLegend, vGrid, xAxis, xGrid, xLabel, xScaleHeat, yAxis, yLabel, yScaleHeat, _i, _j, _len, _ref, _ref1;
      if (start_time == null) {
        start_time = null;
      }
      if (end_time == null) {
        end_time = null;
      }
      if (timecount == null) {
        timecount = 192;
      }
      dataset = this.alldata;
      dataset2 = this.alllocdata;
      dataset = dataset.filter((function(_this) {
        return function(d) {
          var _ref;
          if (start_time !== null && end_time !== null) {
            return (start_time <= (_ref = d.timestamp) && _ref <= end_time);
          } else {
            return true;
          }
        };
      })(this));
      rectHeight = (this.height - 2 * this.padding) / timecount;
      xScaleHeat = d3.scale.ordinal().domain(this.regions).rangeBands([this.padding, this.width - this.padding]);
      yScaleHeat = d3.time.scale().range([this.height - this.padding, this.padding]);
      yScaleHeat.domain(d3.extent(dataset, function(d) {
        return d.timestamp;
      }));
      _ref = this.colPick;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        this.scales[i] = d3.scale.linear().domain([
          0, d3.max(dataset, function(d) {
            return +d[i] / d.sizepol;
          })
        ]).range([this.tmin, this.tmax]);
      }
      yAxis = d3.svg.axis().scale(yScaleHeat).orient('right');
      xAxis = d3.svg.axis().scale(xScaleHeat).ticks(50);
      d3.select(this.parent).selectAll('svg').remove();
      svgHeat = d3.select(this.parent).append('svg').attr({
        width: this.width,
        height: this.height
      });
      showCurrentTime = this.maxtime.slice(14, 16) === '00' ? void 0 : svgHeat.append('text').text(this.maxtime).attr({
        x: 0,
        y: this.height - this.padding - rectHeight / 2,
        stroke: 'red',
        fill: 'red'
      });
      showtime = (function(_this) {
        return function(d) {
          return svgHeat.append('text').text(d).attr({
            x: 0,
            y: yScaleHeat(d),
            stroke: _this.palette['showtime'],
            fill: 'red'
          }).transition().duration(1000).remove();
        };
      })(this);
      showregion = (function(_this) {
        return function(region, order) {
          return svgHeat.append('text').text(region).attr({
            x: xScaleHeat(order),
            y: _this.padding / 1.2,
            stroke: _this.palette['showregion'],
            "stroke-width": 1,
            fill: _this.palette['showregion']
          }).transition().duration(1000).remove();
        };
      })(this);
      for (i = _j = 0, _ref1 = this.colPick.length; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        svgHeat.selectAll("rect" + i).data(dataset).enter().append('rect').attr({
          x: function(d) {
            return xScaleHeat(d['region']);
          },
          y: function(d) {
            return yScaleHeat(d['timestamp']);
          },
          width: this.innerRectWidth - 1,
          height: rectHeight - 2 * this.barPadding,
          transform: (function(_this) {
            return function(d) {
              return "translate(" + ((_this.innerRectWidth - 1) * i) + ", 0)";
            };
          })(this),
          fill: (function(_this) {
            return function(d) {
              return _this.palette[_this.colPick[i]];
            };
          })(this),
          "stroke-width": 0
        }).style({
          "opacity": (function(_this) {
            return function(d) {
              if (_this.colPick[i] === 'erspread') {
                if (+d[_this.colPick[i]] > 0) {
                  return console.log(_this.scales['erspreadmax']((+d[_this.colPick[i]]) / d.sizepol));
                } else {
                  return console.log(_this.scales['erspreadmin']((+d[_this.colPick[i]]) / d.sizepol));
                }
              } else {
                if (+d[_this.colPick[i]]) {
                  return _this.scales[_this.colPick[i]](+d[_this.colPick[i]] / d.sizepol);
                } else {
                  return 0;
                }
              }
            };
          })(this)
        }).on({
          mouseover: function(d) {
            showtime(d.timestamp);
            return showregion(d.region, d.order);
          }
        });
      }
      xLabel = svgHeat.append('g').call(xAxis).attr({
        "class": "axis",
        "transform": "translate(0, " + (this.height - this.padding / 1.5) + ")"
      }).selectAll('text').style("text-anchor", "right").attr("transform", "rotate(-90)");
      yLabel = svgHeat.append('g').call(yAxis).attr({
        "class": 'axis',
        "stroke-width": 1,
        stroke: 'black',
        "transform": "translate(20,-25)"
      }).style({
        'opacity': 0.8
      });
      xGrid = svgHeat.selectAll('.xgrid').data(this.regions).enter().append('line').attr({
        x1: function(d) {
          return xScaleHeat(d);
        },
        x2: function(d) {
          return xScaleHeat(d);
        },
        y1: this.padding,
        y2: this.height - this.padding,
        stroke: 'black'
      }).style({
        opacity: 0.5
      });
      vGrid = svgHeat.selectAll('line').data(dataset2).enter().append('line').attr({
        x1: this.padding,
        x2: this.width - this.padding,
        y1: (function(_this) {
          return function(d, i) {
            return _this.padding + 4 * i * rectHeight;
          };
        })(this),
        y2: (function(_this) {
          return function(d, i) {
            return _this.padding + 4 * i * rectHeight;
          };
        })(this),
        "stroke-width": 1,
        stroke: 'black'
      }).style({
        'opacity': 0.8
      });
      svgLegend = d3.select(this.parent).append('svg').attr({
        width: this.legendWidth,
        height: this.legendHeight
      });
      svgLegend.selectAll('rect').data(this.colPick).enter().append('rect').attr({
        x: (function(_this) {
          return function(d, i) {
            return _this.legendPadding + i * (_this.legendWidth - 2 * _this.legendPadding) / _this.colPick.length;
          };
        })(this),
        y: this.legendPadding,
        width: (this.legendWidth - 2 * this.legendPadding) / this.colPick.length,
        height: this.legendHeight / 3,
        fill: (function(_this) {
          return function(d) {
            return _this.palette[d];
          };
        })(this)
      });
      svgLegend.selectAll('text').data(this.colPick).enter().append('text').text((function(_this) {
        return function(d, i) {
          return _this.colPick[i];
        };
      })(this)).attr({
        x: (function(_this) {
          return function(d, i) {
            return _this.legendPadding + i * (_this.legendWidth - 2 * _this.legendPadding) / _this.colPick.length + 0.5 * (_this.legendWidth - 2 * _this.legendPadding) / _this.colPick.length;
          };
        })(this),
        y: this.legendPadding / 1.1,
        stroke: "black",
        "stroke-width": 1,
        "text-anchor": "middle"
      });
      svgLegend.append('text').text('REGION #').attr({
        x: (this.legendWidth - 2 * this.legendPadding) / 2,
        y: 250,
        fill: "black",
        'font-size': 30
      });
      return svgLegend.append('text').text('TIME t').attr({
        x: 0,
        y: this.legendHeight / 2,
        fill: "black",
        'font-size': 30
      });
    };

    return HeatMap;

  })();

  'use strict';

  DifferenceChart = (function() {
    function DifferenceChart(w, h, parent, title, evDispatch) {
      if (parent == null) {
        parent = "body";
      }
      if (title == null) {
        title = "";
      }
      this.margin = {
        top: 20,
        right: 40,
        bottom: 70,
        left: 70
      };
      this.width = w - this.margin.left - this.margin.right;
      this.height = h - this.margin.top - this.margin.bottom;
      this.parent = parent;
      this.data = null;
      this.title = title;
      this.evDispatch = evDispatch;
      this.curregion = "headquarters";
    }

    DifferenceChart.prototype.draw = function(region, data, start_time, end_time) {
      var area, canvas, dateFormat, legend, line, svg, x, xAxis, y, yAxis;
      if (region == null) {
        region = null;
      }
      if (data == null) {
        data = null;
      }
      if (start_time == null) {
        start_time = null;
      }
      if (end_time == null) {
        end_time = null;
      }
      if (region === null) {
        region = this.curregion;
      }
      this.curregion = region;
      data = data === null ? this.data : data;
      this.data = data;
      dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
      data = data.filter((function(_this) {
        return function(d) {
          return d.businessunit === region;
        };
      })(this));
      data.forEach((function(_this) {
        return function(d) {
          d.timestamp = dateFormat.parse(d.healthtime);
          d.expected = +d.expected;
          return d.reported = +d.reported;
        };
      })(this));
      data = data.filter((function(_this) {
        return function(d) {
          var _ref;
          if (start_time !== null && end_time !== null) {
            return (start_time <= (_ref = d.timestamp) && _ref <= end_time);
          } else {
            return true;
          }
        };
      })(this));
      if (data.length === 0) {
        return;
      }
      x = d3.time.scale().range([0, this.width]);
      y = d3.scale.linear().range([this.height, 0]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      line = d3.svg.area().interpolate("step").x(function(d) {
        return x(d.timestamp);
      }).y(function(d) {
        return y(d.expected);
      });
      area = d3.svg.area().interpolate("step").x(function(d) {
        return x(d.timestamp);
      }).y(function(d) {
        return y(d.expected);
      });
      d3.select(this.parent).selectAll("svg").remove();
      canvas = d3.select(this.parent).append('svg').attr({
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom
      });
      svg = canvas.append('g').attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      x.domain(d3.extent(data, function(d) {
        return d.timestamp;
      }));
      y.domain([
        0, d3.max(data, function(d) {
          return Math.max(d.expected, d.reported);
        })
      ]);
      svg.datum(data);
      svg.append("path").attr("class", "area below").attr("d", area.y0(function(d) {
        if (d.expected >= d.reported) {
          return y(d.reported);
        } else {
          return y(0);
        }
      }).y1(function(d) {
        if (d.expected >= d.reported) {
          return y(d.expected);
        } else {
          return y(0);
        }
      }));
      svg.append("path").attr("class", "area above").attr("d", area.y0(function(d) {
        if (d.expected < d.reported) {
          return y(d.expected);
        } else {
          return y(0);
        }
      }).y1(function(d) {
        if (d.expected < d.reported) {
          return y(d.reported);
        } else {
          return y(0);
        }
      }));
      svg.append("path").attr("class", "line").attr("d", line);
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(xAxis);
      svg.append("g").attr("class", "y axis").call(yAxis);
      canvas.append("text").attr("transform", "translate(0,30) rotate(-90)").attr("y", 10).attr("dy", ".71em").style("text-anchor", "end").text("Machine Count");
      svg.append("text").attr("x", this.width / 2).attr("y", 0 - (this.margin.top / 2)).attr("text-anchor", "middle").attr("class", "chart-title").text(this.title);
      legend = svg.append('g');
      legend.append("text").attr("x", this.width / 2).attr("y", this.height + (this.margin.bottom / 2) + 5).attr("class", "legend").style({
        stroke: "red",
        "stroke-width": "1px"
      }).text("Down but should be up");
      return legend.append("text").attr("x", this.width / 2).attr("y", this.height + (this.margin.bottom / 2) + 15).attr("class", "legend").style("stroke", "#118bff").text("Up but should be Down");
    };

    return DifferenceChart;

  })();

  MultiLineChart = (function() {
    function MultiLineChart(w, h, parent, title, evDispatch) {
      if (parent == null) {
        parent = "body";
      }
      if (title == null) {
        title = "";
      }
      this.margin = {
        top: 20,
        right: 20,
        bottom: 70,
        left: 50
      };
      this.width = w - this.margin.left - this.margin.right;
      this.height = h - this.margin.top - this.margin.bottom;
      this.parent = parent;
      this.data = null;
      this.title = title;
      this.evDispatch = evDispatch;
      this.curregion = "headquarters";
    }

    MultiLineChart.prototype.draw = function(region, data, start_time, end_time) {
      var canvas, dateFormat, line, svg, workzone, x, xAxis, y, yAxis;
      if (region == null) {
        region = null;
      }
      if (data == null) {
        data = null;
      }
      if (start_time == null) {
        start_time = null;
      }
      if (end_time == null) {
        end_time = null;
      }
      if (region === null) {
        region = this.curregion;
      }
      this.curregion = region;
      data = data === null ? this.data : data;
      this.data = data;
      dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
      data = data.filter((function(_this) {
        return function(d) {
          return d.businessunit === region;
        };
      })(this));
      data.forEach(function(d) {
        d.timestamp = dateFormat.parse(d.healthtime);
        d.expected = +d.expected;
        return d.reported = +d.reported;
      });
      data = data.filter((function(_this) {
        return function(d) {
          var _ref;
          if (start_time !== null && end_time !== null) {
            return (start_time <= (_ref = d.timestamp) && _ref <= end_time);
          } else {
            return true;
          }
        };
      })(this));
      x = d3.time.scale().range([0, this.width]);
      y = d3.scale.linear().range([this.height, 0]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      line = d3.svg.area().interpolate("basis").x(function(d) {
        return x(new Date(d.timestamp.getTime() - +d.lag * 60 * 60 * 1000));
      }).y(function(d) {
        return y(+d.avgconn);
      });
      workzone = d3.svg.area().interpolate("basis").x(function(d) {
        return x(d.timestamp);
      }).y((function(_this) {
        return function(d) {
          var time;
          time = new Date(d.timestamp.getTime() - d.lag * 60 * 60 * 1000);
          if (time.getHours() >= 7 && time.getHours() < 18) {
            return 0;
          } else {
            return _this.height;
          }
        };
      })(this));
      d3.select(this.parent).selectAll("svg").remove();
      canvas = d3.select(this.parent).append('svg').attr({
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom
      });
      svg = canvas.append('g').attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      x.domain(d3.extent(data, function(d) {
        return new Date(d.timestamp.getTime() - +d.lag * 60 * 60 * 1000);
      }));
      y.domain(d3.extent(data, function(d) {
        return +d.avgconn;
      }));
      svg.append("path").datum(data).attr("class", "line").attr("d", line);
      svg.datum(data).append("path").attr("fill", "red").attr("d", workzone);
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(xAxis);
      svg.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end");
      canvas.append("text").attr("transform", "translate(0,30) rotate(-90)").attr("y", 10).attr("dy", ".71em").style("text-anchor", "end").text("Average Connections");
      return svg.append("text").attr("x", this.width / 2).attr("y", 0 - (this.margin.top / 2)).attr("text-anchor", "middle").attr("class", "chart-title").text(this.title);
    };

    return MultiLineChart;

  })();

  BWDashboard = (function() {
    function BWDashboard(parent) {
      if (parent == null) {
        parent = "body";
      }
      this.setupEventDispatch();
      this.setupPlots();
      this.loadData();
      this.curtime = 1;
      this.playinterval = 1;
    }

    BWDashboard.prototype.setupEventDispatch = function() {
      return this.evdispatch = d3.dispatch("load", "selectRegion", "selectTime", "attime");
    };

    BWDashboard.prototype.setupPlots = function() {
      this.bw_map_for_spread = new BWMapVirus(400, 300, "#bw_map_for_spread", this.evdispatch);
      this.evdispatch.on("attime.mapspread", (function(_this) {
        return function(time) {
          return _this.bw_map_for_spread.draw(time);
        };
      })(this));
      this.bw_map_for_spread.load();
      this.bw_ws_reported_chart = new DifferenceChart(560, 200, "#bw_ws_reported_chart", "Expected vs Reported Workstations");
      this.bw_server_reported_chart = new DifferenceChart(560, 200, "#bw_server_reported_chart", "Expected vs Reported Servers");
      this.bw_atm_reported_chart = new DifferenceChart(560, 200, "#bw_atm_reported_chart", "Expected vs Reported ATM");
      this.evdispatch.on("selectRegion.ws", (function(_this) {
        return function(region) {
          return _this.bw_ws_reported_chart.draw(region);
        };
      })(this));
      this.evdispatch.on("selectTime.ws", (function(_this) {
        return function(start, end) {
          return _this.bw_ws_reported_chart.draw(null, null, start, end);
        };
      })(this));
      this.evdispatch.on("selectRegion.server", (function(_this) {
        return function(region) {
          return _this.bw_server_reported_chart.draw(region);
        };
      })(this));
      this.evdispatch.on("selectTime.server", (function(_this) {
        return function(start, end) {
          return _this.bw_server_reported_chart.draw(null, null, start, end);
        };
      })(this));
      this.evdispatch.on("selectRegion.atm", (function(_this) {
        return function(region) {
          return _this.bw_atm_reported_chart.draw(region);
        };
      })(this));
      this.evdispatch.on("selectTime.atm", (function(_this) {
        return function(start, end) {
          return _this.bw_atm_reported_chart.draw(null, null, start, end);
        };
      })(this));
      this.bw_ws_conn_chart = new WsConnectionsChart(760, 200, "#bw_ws_conn_chart", "WS Connections");
      this.evdispatch.on("selectRegion.bw_ws_conn_chart", (function(_this) {
        return function(region) {
          return _this.bw_ws_conn_chart.draw(region);
        };
      })(this));
      this.evdispatch.on("selectTime.bw_ws_conn_chart", (function(_this) {
        return function(start, end) {
          return _this.bw_ws_conn_chart.draw(null);
        };
      })(this));
      this.bw_server_conn_chart = new ServerConnectionsChart(760, 200, "#bw_server_conn_chart", "Server Connections");
      this.evdispatch.on("selectRegion.bw_server_conn_chart", (function(_this) {
        return function(region) {
          return _this.bw_server_conn_chart.draw(region);
        };
      })(this));
      this.evdispatch.on("selectTime.bw_server_conn_chart", (function(_this) {
        return function(start, end) {
          return _this.bw_server_conn_chart.draw(null);
        };
      })(this));
      this.bw_policy_chart = new MultiTimeSeriesPolicyChart(760, 200, "#bw_policy_chart", "Policy & Activity Flag", this.evdispatch);
      this.evdispatch.on("selectRegion.policy", (function(_this) {
        return function(region) {
          return _this.bw_policy_chart.draw(region);
        };
      })(this));
      this.heatmap = new HeatMap(1400, 900, '#global_heat_map');
      d3.tsv('/static/csv/everything_2_glob_lat.csv', (function(_this) {
        return function(d) {
          return d3.csv('/static/csv/heat_latlong.csv', function(c) {
            _this.heatmap.load(d, c);
            return _this.heatmap.draw();
          });
        };
      })(this));
      $("#slider-range").slider({
        range: true,
        min: 0,
        max: 192,
        step: 1,
        values: [0, 192],
        slide: (function(_this) {
          return function(event, ui) {
            var dateFormat, end_date, start_date;
            dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
            start_date = new Date(dateFormat.parse("2012-02-02 08:00:00").getTime() + +ui.values[0] * 60000 * 15);
            end_date = new Date(dateFormat.parse("2012-02-04 08:00:00").getTime() - (192 - +ui.values[1]) * 60000 * 15);
            $("#start_time").attr("value", start_date.toString());
            $("#end_time").attr("value", end_date.toString());
            _this.evdispatch.selectTime(start_date, end_date);
            return _this.heatmap.draw(start_date, end_date, ui.values[1] - ui.values[0]);
          };
        })(this)
      });
      $("#timeslider").slider({
        range: "max",
        min: 0,
        max: 192,
        step: 1,
        value: 0,
        slide: (function(_this) {
          return function(event, ui) {
            var dateFormat, start_date;
            dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
            start_date = new Date(dateFormat.parse("2012-02-02 08:00:00").getTime() + +ui.value * 60000 * 15);
            $("#attime").val(start_date.toString());
            return _this.evdispatch.attime(start_date);
          };
        })(this)
      });
      $("#play").button({
        text: false,
        icons: {
          primary: "ui-icon-play"
        }
      }).click((function(_this) {
        return function() {
          return _this.playinterval = setInterval(function() {
            var dateFormat, start_date;
            dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
            start_date = new Date(dateFormat.parse("2012-02-02 08:00:00").getTime() + _this.curtime * 60000 * 15);
            $("#attime").val(start_date.toString());
            _this.evdispatch.attime(start_date);
            _this.curtime = _this.curtime + 1;
            if (_this.curtime > 192) {
              return _this.curtime = 1;
            }
          }, 200);
        };
      })(this));
      return $("#stop").button({
        text: false,
        icons: {
          primary: "ui-icon-stop"
        }
      }).click((function(_this) {
        return function() {
          return clearInterval(_this.playinterval);
        };
      })(this));
    };

    BWDashboard.prototype.loadData = function() {
      d3.csv('/static/csv/ws_report_status_new.csv', (function(_this) {
        return function(error, data) {
          return _this.bw_ws_reported_chart.draw("headquarters", data);
        };
      })(this));
      d3.csv('/static/csv/server_report_status.csv', (function(_this) {
        return function(error, data) {
          return _this.bw_server_reported_chart.draw("headquarters", data);
        };
      })(this));
      d3.csv('/static/csv/atm_report_status.csv', (function(_this) {
        return function(error, data) {
          return _this.bw_atm_reported_chart.draw("headquarters", data);
        };
      })(this));
      d3.csv('/static/csv/ws_connection_new.csv', (function(_this) {
        return function(error, data) {
          _this.bw_ws_conn_chart.load(data);
          return _this.bw_ws_conn_chart.draw("headquarters", data);
        };
      })(this));
      d3.csv('/static/csv/server_connection_new.csv', (function(_this) {
        return function(error, data) {
          _this.bw_server_conn_chart.load(data);
          return _this.bw_server_conn_chart.draw("headquarters", data);
        };
      })(this));
      return d3.csv('/static/csv/overall_policy_activity_status_new.csv', (function(_this) {
        return function(error, data) {
          _this.bw_policy_chart.load(data);
          return _this.bw_policy_chart.draw("headquarters");
        };
      })(this));
    };

    return BWDashboard;

  })();

  b = new BWDashboard();

}).call(this);
