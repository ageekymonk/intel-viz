// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var BWDashboard, BWMap, BWSpreadMap, DifferenceChart, MultiLineChart, MultiTimeSeriesChart, MultiTimeSeriesPolicyChart, b;

  DifferenceChart = (function() {
    function DifferenceChart(w, h, parent, title, evDispatch) {
      if (parent == null) {
        parent = "body";
      }
      if (title == null) {
        title = "";
      }
      this.margin = {
        top: 20,
        right: 20,
        bottom: 70,
        left: 50
      };
      this.width = w - this.margin.left - this.margin.right;
      this.height = h - this.margin.top - this.margin.bottom;
      this.parent = parent;
      this.data = null;
      this.title = title;
      this.evDispatch = evDispatch;
      this.curregion = "headquarters";
    }

    DifferenceChart.prototype.draw = function(region, data, start_time, end_time) {
      var area, dateFormat, legend, line, svg, x, xAxis, y, yAxis, zoom;
      if (region == null) {
        region = null;
      }
      if (data == null) {
        data = null;
      }
      if (start_time == null) {
        start_time = null;
      }
      if (end_time == null) {
        end_time = null;
      }
      if (region === null) {
        region = this.curregion;
      }
      this.curregion = region;
      data = data === null ? this.data : data;
      this.data = data;
      dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
      data = data.filter((function(_this) {
        return function(d) {
          return d.businessunit === region;
        };
      })(this));
      data.forEach((function(_this) {
        return function(d) {
          d.timestamp = dateFormat.parse(d.healthtime);
          d.expected = +d.expected;
          return d.reported = +d.reported;
        };
      })(this));
      data = data.filter((function(_this) {
        return function(d) {
          var _ref;
          if (start_time !== null && end_time !== null) {
            return (start_time <= (_ref = d.timestamp) && _ref <= end_time);
          } else {
            return true;
          }
        };
      })(this));
      x = d3.time.scale().range([0, this.width]);
      y = d3.scale.linear().range([this.height, 0]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      line = d3.svg.area().interpolate("step").x(function(d) {
        return x(d.timestamp);
      }).y(function(d) {
        return y(d.expected);
      });
      area = d3.svg.area().interpolate("step").x(function(d) {
        return x(d.timestamp);
      }).y(function(d) {
        return y(d.expected);
      });
      zoom = d3.behavior.zoom().on("zoom", (function(_this) {
        return function() {
          console.log(d3.event.scale);
          return svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
        };
      })(this)).scaleExtent([1, 5]);
      d3.select(this.parent).selectAll("svg").remove();
      svg = d3.select(this.parent).append('svg').attr({
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom
      }).append('g').attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")").call(zoom);
      x.domain(d3.extent(data, function(d) {
        return d.timestamp;
      }));
      y.domain([
        0, d3.max(data, function(d) {
          return Math.max(d.expected, d.reported);
        })
      ]);
      svg.datum(data);
      svg.append("path").attr("class", "area below").attr("d", area.y0(function(d) {
        if (d.expected >= d.reported) {
          return y(d.reported);
        } else {
          return y(0);
        }
      }).y1(function(d) {
        if (d.expected >= d.reported) {
          return y(d.expected);
        } else {
          return y(0);
        }
      }));
      svg.append("path").attr("class", "area above").attr("d", area.y0(function(d) {
        if (d.expected < d.reported) {
          return y(d.expected);
        } else {
          return y(0);
        }
      }).y1(function(d) {
        if (d.expected < d.reported) {
          return y(d.reported);
        } else {
          return y(0);
        }
      }));
      svg.append("path").attr("class", "line").attr("d", line);
      svg.append("path").attr("class", "line").attr("d", line.y(function(d) {
        return y(d.reported);
      }));
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(xAxis);
      svg.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end");
      svg.append("text").attr("x", this.width / 2).attr("y", 0 - (this.margin.top / 2)).attr("text-anchor", "middle").style("font-size", "12px").style("text-decoration", "underline").text(this.title);
      legend = svg.append('g');
      legend.append("text").attr("x", this.width / 2).attr("y", this.height + (this.margin.bottom / 2) + 5).attr("class", "legend").style("stroke", "green").text("Down but should be up");
      return legend.append("text").attr("x", this.width / 2).attr("y", this.height + (this.margin.bottom / 2) + 15).attr("class", "legend").style("stroke", "red").text("Up but should be Down");
    };

    return DifferenceChart;

  })();

  MultiLineChart = (function() {
    function MultiLineChart(w, h, parent, title, evDispatch) {
      if (parent == null) {
        parent = "body";
      }
      if (title == null) {
        title = "";
      }
      this.margin = {
        top: 20,
        right: 20,
        bottom: 70,
        left: 50
      };
      this.width = w - this.margin.left - this.margin.right;
      this.height = h - this.margin.top - this.margin.bottom;
      this.parent = parent;
      this.data = null;
      this.title = title;
      this.evDispatch = evDispatch;
      this.curregion = "headquarters";
    }

    MultiLineChart.prototype.draw = function(region, data, start_time, end_time) {
      var dateFormat, legend, line, svg, x, xAxis, y, yAxis;
      if (region == null) {
        region = null;
      }
      if (data == null) {
        data = null;
      }
      if (start_time == null) {
        start_time = null;
      }
      if (end_time == null) {
        end_time = null;
      }
      if (region === null) {
        region = this.curregion;
      }
      this.curregion = region;
      data = data === null ? this.data : data;
      this.data = data;
      dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
      data = data.filter((function(_this) {
        return function(d) {
          return d.businessunit === region;
        };
      })(this));
      data.forEach(function(d) {
        d.timestamp = dateFormat.parse(d.healthtime);
        d.expected = +d.expected;
        return d.reported = +d.reported;
      });
      data = data.filter((function(_this) {
        return function(d) {
          var _ref;
          if (start_time !== null && end_time !== null) {
            return (start_time <= (_ref = d.timestamp) && _ref <= end_time);
          } else {
            return true;
          }
        };
      })(this));
      x = d3.time.scale().range([0, this.width]);
      y = d3.scale.linear().range([this.height, 0]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      line = d3.svg.area().interpolate("basis").x(function(d) {
        return x(d.timestamp);
      }).y(function(d) {
        return y(+d.avgconn);
      });
      d3.select(this.parent).selectAll("svg").remove();
      svg = d3.select(this.parent).append('svg').attr({
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom
      }).append('g').attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      x.domain(d3.extent(data, function(d) {
        return d.timestamp;
      }));
      y.domain([0, 50]);
      svg.append("path").datum(data).attr("class", "line").attr("d", line);
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(xAxis);
      svg.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end");
      svg.append("text").attr("x", this.width / 2).attr("y", 0 - (this.margin.top / 2)).attr("text-anchor", "middle").style("font-size", "12px").style("text-decoration", "underline").text(this.title);
      legend = svg.append('g');
      legend.append("text").attr("x", this.width / 2).attr("y", this.height + (this.margin.bottom / 2) + 5).attr("class", "legend").style("stroke", "green").text("Down but should be up");
      return legend.append("text").attr("x", this.width / 2).attr("y", this.height + (this.margin.bottom / 2) + 15).attr("class", "legend").style("stroke", "red").text("Up but should be Down");
    };

    return MultiLineChart;

  })();

  BWMap = (function() {
    function BWMap(width, height, parent, evDispatch) {
      if (width == null) {
        width = 400;
      }
      if (height == null) {
        height = 300;
      }
      if (parent == null) {
        parent = "body";
      }
      this.width = width;
      this.height = height;
      this.evDispatch = evDispatch;
      this.projection = d3.geo.equirectangular();
      this.svg = d3.select(parent).append("svg").attr({
        width: this.width,
        height: this.height
      });
    }

    BWMap.prototype.draw = function() {
      return d3.csv('/static/csv/branch_lat_long.csv').get((function(_this) {
        return function(error, world) {
          world.forEach(function(d) {
            var _ref, _ref1;
            _ref = _this.projection([d.minlong, d.maxlat]), d.x1 = _ref[0], d.y1 = _ref[1];
            _ref1 = _this.projection([d.maxlong, d.minlat]), d.x2 = _ref1[0], d.y2 = _ref1[1];
            d.width = (d.x2 - d.x1) === 0 ? 5 : d.x2 - d.x1;
            return d.height = (d.y2 - d.y1) === 0 ? 5 : d.y2 - d.y1;
          });
          _this.svg.selectAll(".area").data(world).enter().append("rect", ".area").attr({
            x: function(d) {
              return d.x1;
            },
            y: function(d) {
              return d.y1;
            },
            width: function(d) {
              return d.width;
            },
            height: function(d) {
              return d.height;
            },
            id: function(d) {
              return "bu_" + d.businessunit;
            }
          }).style("stroke", "black").attr("fill", "white").on("click", function(d) {
            return _this.evDispatch.selectRegion(d.businessunit);
          });
          return d3.select(self.frameElement).style("height", _this.height + "px");
        };
      })(this));
    };

    return BWMap;

  })();

  BWSpreadMap = (function() {
    function BWSpreadMap(width, height, parent, evDispatch) {
      if (width == null) {
        width = 400;
      }
      if (height == null) {
        height = 300;
      }
      if (parent == null) {
        parent = "body";
      }
      this.width = width;
      this.height = height;
      this.evDispatch = evDispatch;
      this.projection = d3.geo.equirectangular();
      this.svg = d3.select(parent).append("svg").attr({
        width: this.width,
        height: this.height
      });
    }

    BWSpreadMap.prototype.draw = function() {
      return d3.csv('/static/csv/branch_lat_long.csv').get((function(_this) {
        return function(error, world) {
          world.forEach(function(d) {
            var _ref, _ref1;
            _ref = _this.projection([d.minlong, d.maxlat]), d.x1 = _ref[0], d.y1 = _ref[1];
            _ref1 = _this.projection([d.maxlong, d.minlat]), d.x2 = _ref1[0], d.y2 = _ref1[1];
            d.width = (d.x2 - d.x1) === 0 ? 5 : d.x2 - d.x1;
            return d.height = (d.y2 - d.y1) === 0 ? 5 : d.y2 - d.y1;
          });
          _this.svg.selectAll(".area").data(world).enter().append("rect", ".area").attr({
            x: function(d) {
              return d.x1;
            },
            y: function(d) {
              return d.y1;
            },
            width: function(d) {
              return d.width;
            },
            height: function(d) {
              return d.height;
            },
            id: function(d) {
              return "bu_" + d.businessunit;
            }
          }).style("stroke", "black").attr("fill", "white").on("click", function(d) {
            return _this.evDispatch.selectRegion(d.businessunit);
          });
          return d3.select(self.frameElement).style("height", _this.height + "px");
        };
      })(this));
    };

    BWSpreadMap.prototype.virusSpread = function() {
      return d3.csv('/static/csv/policy5_status.csv').get((function(_this) {
        return function(error, virusdata) {
          var dateFormat;
          dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
          virusdata.forEach(function(d) {
            return d.timestamp = dateFormat.parse(d.healthtime);
          });
          return virusdata.forEach(function(vd) {
            var data, _i, _j, _ref, _ref1, _results, _results1;
            if (+vd.numipaddr > 0) {
              data = _this.svg.select("#bu_" + vd.businessunit).datum();
              console.log((function() {
                _results = [];
                for (var _i = 1, _ref = 1 + (+vd.numipaddr / 10); 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
                return _results;
              }).apply(this));
              return _this.svg.selectAll("circle").data((function() {
                _results1 = [];
                for (var _j = 1, _ref1 = 1 + (+vd.numipaddr / 10); 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 1 <= _ref1 ? _j++ : _j--){ _results1.push(_j); }
                return _results1;
              }).apply(this)).enter().append("circle").attr({
                cx: function(d) {
                  return data.x1 + data.width / 2 + d * 2;
                },
                cy: function(d) {
                  return data.y1 + data.height / 2 + d * 2;
                },
                r: 2
              }).style("fill", "steelblue");
            }
          });
        };
      })(this));
    };

    return BWSpreadMap;

  })();

  MultiTimeSeriesChart = (function() {
    function MultiTimeSeriesChart(w, h, parent, title, evDispatch) {
      if (parent == null) {
        parent = "body";
      }
      if (title == null) {
        title = "";
      }
      this.margin = {
        top: 20,
        right: 20,
        bottom: 50,
        left: 50
      };
      this.width = w - this.margin.left - this.margin.right;
      this.height = h - this.margin.top - this.margin.bottom;
      this.parent = parent;
      this.data = null;
      this.title = title;
      this.evDispatch = evDispatch;
      this.curregion = "headquarters";
    }

    MultiTimeSeriesChart.prototype.draw = function(region, activityflag, data) {
      var button, dateFormat, line, svg, x, xAxis, y, yAxis;
      if (region == null) {
        region = "headquarters";
      }
      if (activityflag == null) {
        activityflag = 5;
      }
      if (data == null) {
        data = null;
      }
      this.curregion = region;
      button = d3.select(this.parent).selectAll("button").data(["1", "2", "3", "4", "5"]).enter().append('button').attr("type", "button").attr("class", "btn btn-primary btn-xs").text(function(d) {
        return d;
      });
      button.on("click", (function(_this) {
        return function(d) {
          console.log(_this.curregion);
          return _this.draw(_this.curregion, +d, _this.data);
        };
      })(this));
      data = data === null ? this.data : data;
      this.data = data;
      dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
      data = data.filter((function(_this) {
        return function(d) {
          return d.businessunit === region;
        };
      })(this));
      data.forEach(function(d) {
        return d.timestamp = dateFormat.parse(d.healthtime);
      });
      x = d3.time.scale().range([0, this.width]);
      y = d3.scale.linear().range([this.height, 0]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      line = d3.svg.line().x(function(d) {
        return x(d.timestamp);
      }).y(function(d) {
        return y(+d.numipaddr);
      });
      d3.select(this.parent).selectAll("svg").remove();
      svg = d3.select(this.parent).append('svg').attr({
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom
      }).append('g').attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      x.domain(d3.extent(data, function(d) {
        return d.timestamp;
      }));
      y.domain(d3.extent(data.filter((function(_this) {
        return function(d) {
          return +d.activityflag === activityflag;
        };
      })(this)), function(d) {
        return +d.numipaddr;
      }));
      svg.append("path").datum(data.filter((function(_this) {
        return function(d) {
          return +d.activityflag === activityflag;
        };
      })(this))).attr("class", "line").attr("d", line);
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(xAxis);
      svg.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end");
      return svg.append("text").attr("x", this.width / 2).attr("y", 0 - (this.margin.top / 2)).attr("text-anchor", "middle").style("font-size", "12px").style("text-decoration", "underline").text(this.title);
    };

    return MultiTimeSeriesChart;

  })();

  MultiTimeSeriesPolicyChart = (function() {
    function MultiTimeSeriesPolicyChart(w, h, parent, title, evDispatch) {
      if (parent == null) {
        parent = "body";
      }
      if (title == null) {
        title = "";
      }
      this.margin = {
        top: 20,
        right: 20,
        bottom: 50,
        left: 50
      };
      this.width = w - this.margin.left - this.margin.right;
      this.height = h - this.margin.top - this.margin.bottom;
      this.parent = parent;
      this.data = null;
      this.title = title;
      this.evDispatch = evDispatch;
      this.curregion = "headquarters";
    }

    MultiTimeSeriesPolicyChart.prototype.draw = function(region, policystatus, data) {
      var button, dateFormat, line, svg, x, xAxis, y, yAxis;
      if (region == null) {
        region = "headquarters";
      }
      if (policystatus == null) {
        policystatus = 5;
      }
      if (data == null) {
        data = null;
      }
      this.curregion = region;
      button = d3.select(this.parent).selectAll("button").data(["1", "2", "3", "4", "5"]).enter().append('button').attr("type", "button").attr("class", "btn btn-primary btn-xs").text(function(d) {
        return d;
      });
      button.on("click", (function(_this) {
        return function(d) {
          console.log(_this.curregion);
          return _this.draw(_this.curregion, +d, _this.data);
        };
      })(this));
      data = data === null ? this.data : data;
      this.data = data;
      dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
      data = data.filter((function(_this) {
        return function(d) {
          return d.businessunit === region;
        };
      })(this));
      data.forEach(function(d) {
        return d.timestamp = dateFormat.parse(d.healthtime);
      });
      x = d3.time.scale().range([0, this.width]);
      y = d3.scale.linear().range([this.height, 0]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      line = d3.svg.line().x(function(d) {
        return x(d.timestamp);
      }).y(function(d) {
        return y(+d.numipaddr);
      });
      d3.select(this.parent).selectAll("svg").remove();
      svg = d3.select(this.parent).append('svg').attr({
        width: this.width + this.margin.left + this.margin.right,
        height: this.height + this.margin.top + this.margin.bottom
      }).append('g').attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      x.domain(d3.extent(data, function(d) {
        return d.timestamp;
      }));
      y.domain(d3.extent(data.filter((function(_this) {
        return function(d) {
          return +d.policystatus === policystatus;
        };
      })(this)), function(d) {
        return +d.numipaddr;
      }));
      svg.append("path").datum(data.filter((function(_this) {
        return function(d) {
          return +d.policystatus === policystatus;
        };
      })(this))).attr("class", "line").attr("d", line);
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(xAxis);
      svg.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end");
      return svg.append("text").attr("x", this.width / 2).attr("y", 0 - (this.margin.top / 2)).attr("text-anchor", "middle").style("font-size", "12px").style("text-decoration", "underline").text(this.title);
    };

    return MultiTimeSeriesPolicyChart;

  })();

  BWDashboard = (function() {
    function BWDashboard(parent) {
      if (parent == null) {
        parent = "body";
      }
      this.setupEventDispatch();
      this.setupFrame();
      this.setupPlots();
      this.loadData();
    }

    BWDashboard.prototype.setupEventDispatch = function() {
      return this.evdispatch = d3.dispatch("load", "selectRegion", "selectTime");
    };

    BWDashboard.prototype.setupFrame = function() {
      return console.log("here");
    };

    BWDashboard.prototype.setupPlots = function() {
      this.bw_map_selector = new BWMap(400, 300, "#bw_map_selector", this.evdispatch);
      this.bw_map_selector.draw();
      this.bw_ws_reported_chart = new DifferenceChart(560, 200, "#bw_ws_reported_chart", "Expected vs Reported Workstations");
      this.bw_server_reported_chart = new DifferenceChart(560, 200, "#bw_server_reported_chart", "Expected vs Reported Servers");
      this.bw_atm_reported_chart = new DifferenceChart(560, 200, "#bw_atm_reported_chart", "Expected vs Reported ATM");
      this.evdispatch.on("selectRegion.ws", (function(_this) {
        return function(region) {
          return _this.bw_ws_reported_chart.draw(region);
        };
      })(this));
      this.evdispatch.on("selectTime.ws", (function(_this) {
        return function(start, end) {
          return _this.bw_ws_reported_chart.draw(null, null, start, end);
        };
      })(this));
      this.evdispatch.on("selectRegion.server", (function(_this) {
        return function(region) {
          return _this.bw_server_reported_chart.draw(region);
        };
      })(this));
      this.evdispatch.on("selectTime.server", (function(_this) {
        return function(start, end) {
          return _this.bw_server_reported_chart.draw(null, null, start, end);
        };
      })(this));
      this.evdispatch.on("selectRegion.atm", (function(_this) {
        return function(region) {
          return _this.bw_atm_reported_chart.draw(region);
        };
      })(this));
      this.evdispatch.on("selectTime.atm", (function(_this) {
        return function(start, end) {
          return _this.bw_atm_reported_chart.draw(null, null, start, end);
        };
      })(this));
      this.bw_conn_chart = new MultiLineChart(560, 200, "#bw_conn_chart", "Num Connections");
      this.evdispatch.on("selectRegion.bwconn", (function(_this) {
        return function(region) {
          return _this.bw_conn_chart.draw(region);
        };
      })(this));
      this.evdispatch.on("selectTime.bwconn", (function(_this) {
        return function(start, end) {
          return _this.bw_conn_chart.draw(null, null, start, end);
        };
      })(this));
      this.bw_activity_chart = new MultiTimeSeriesChart(560, 200, "#bw_activity_chart", "Activity Flag", this.evdispatch);
      this.evdispatch.on("selectRegion.activity", (function(_this) {
        return function(region) {
          return _this.bw_activity_chart.draw(region);
        };
      })(this));
      this.bw_policy_chart = new MultiTimeSeriesPolicyChart(560, 200, "#bw_policy_chart", "Policy Flag", this.evdispatch);
      this.evdispatch.on("selectRegion.policy", (function(_this) {
        return function(region) {
          return _this.bw_policy_chart.draw(region);
        };
      })(this));
      return $("#slider-range").slider({
        range: true,
        min: 0,
        max: 192,
        step: 1,
        values: [0, 192],
        slide: (function(_this) {
          return function(event, ui) {
            var dateFormat, end_date, start_date;
            dateFormat = d3.time.format("%Y-%m-%d %H:%M:%S");
            start_date = new Date(dateFormat.parse("2012-02-02 08:00:00").getTime() + +ui.values[0] * 60000 * 15);
            end_date = new Date(dateFormat.parse("2012-02-04 08:00:00").getTime() - (192 - +ui.values[1]) * 60000 * 15);
            $("#start_time").text(start_date.toString());
            $("#end_time").text(end_date.toString());
            _this.evdispatch.selectTime(start_date, end_date);
            console.log(start_date.toString());
            return console.log(end_date.toString());
          };
        })(this)
      });
    };

    BWDashboard.prototype.loadData = function() {
      d3.csv('/static/csv/ws_teller_report_status.csv', (function(_this) {
        return function(error, data) {
          return _this.bw_ws_reported_chart.draw("headquarters", data);
        };
      })(this));
      d3.csv('/static/csv/server_report_status.csv', (function(_this) {
        return function(error, data) {
          return _this.bw_server_reported_chart.draw("headquarters", data);
        };
      })(this));
      d3.csv('/static/csv/atm_report_status.csv', (function(_this) {
        return function(error, data) {
          return _this.bw_atm_reported_chart.draw("headquarters", data);
        };
      })(this));
      d3.csv('/static/csv/ws_teller_connection.csv', (function(_this) {
        return function(error, data) {
          return _this.bw_conn_chart.draw("headquarters", data);
        };
      })(this));
      d3.csv('/static/csv/activity12345_status.csv', (function(_this) {
        return function(error, data) {
          return _this.bw_activity_chart.draw("headquarters", 5, data);
        };
      })(this));
      return d3.csv('/static/csv/policy12345_status.csv', (function(_this) {
        return function(error, data) {
          return _this.bw_policy_chart.draw("headquarters", 5, data);
        };
      })(this));
    };

    return BWDashboard;

  })();

  b = new BWDashboard();

}).call(this);
